kotlin
-> 컴파일 시간 단축
-> 파이썬코드 웹으로 볼 수 있음

keynote
Compose로 andriod MutilPlatform 만들기
: https://bit/ly/3mPcpLu [이젠 컨퍼런스]

Compose란?
-> Jetpack Compose
-> UI도구 키트
-> 한국많이 쓰고, 안정화 단계 2024

: 비동기와 동시성의 대한 이슈가 존재함
:  Kotlin/ Compose Multiplatform
: UI, Presentation, domain.Business, 몰라
: single platform, Multiplatform

common -> 모듈
안드로이드
데스크탑

: export -> [Expect - Actual]


Material Theme -> Light/Dart Theme
API  ,  database  ,  etc..

platform version 분기 -> expect  ,  actual

----------------------------------------------------
<<<<<<< HEAD
=======

Part2
함수형 코틀린 프로그래밍

함수형 프로그래밍
-> 실제 개발에 의미가 있는지 생각해보아야 함

```
함수형 프로그래밍 접근
목적을 이해하고
어떻게 새용해야할 지 알아야 하며
그 이후에 무엇이 있는 지 파악해도 늦지 않다.
```

1. 간결한 코드 작성하기
2. 고차함수를 통해 기능 확장한다.
3. 객체지향 식으로 클린코드 작성하기 
4. 인터페이스 추상화 작업시 [데이터 타입 작성]
5. 이러한 함수를 하나의 추상화 작업을 할 수 있음.
6. 외부에서 접근할 extern을 통해 다형성을 표현
7. 안전성의 대한 이슈 -> 수정 변도성이 높다. 
서버 통신 클라이언트를 활용하여 배열을 가져와 데이터 로직을 작성한다.
데이터 전처리 작업 및 생성 하는 작업들은 [가독성, 클라이언트가 임의로 수정가능]
: 해결 방법
-> 객체 생성시 [parmeter] 없이 함수 로직을 빼서 격리 시킨다.
-> 함수 스코프를 통해 해결을 한다.
-> 해당 패키지 활용을 통해 추상화 및 인터페이스 확용을 적극적으로 활용한다.
    // 객체.외부 상태의 변동이 있는 부분은 블록 Scope을 격리한다.

Types of Function
1. Pure function : 입력이 동일하면 결과가 항상 같은 함수를 순수함수(Pure Function)라 한다.
sum += x + y 
2. Side Effect : 외부 상태에 영향을 줄 수 있고 이를 관찰하는 행위??
// 함수 그자체를 모듈화된 가능 사용 ??
결론 : 외부 세계를 변경을 시키고,최소화하고 구분(격리)시키자

고차함수
-> CSV로 Append 하는 기능이 추가된다면??
-> 객체를 String으로 전환하는 로직을 외부에서 주입시켜 공통 로직에 다형성을 제공한다.
   여러가지의 기능이 사용가능??

Q. 재사용성을 끌어올리고 안정적으로 프로그래밍 하려면,
A. 고차함수를 활용하는 객체(객체 컨테이너 의 특성을 알고, 이를 활용하면 된다.

함수형에 적절한 "컨테이너"
-> Monad - monoid[결합법칙, 항등원의 관계]
: 체이닝해도 문제가 없도록 처리할 수 있다.
-> 

Category Theory
: 분류이론
: 구조체와 구조체들간의 관계를 다룬다.
-> 각각의 기기를 특성에 따라 분류가 가능하다.
-> 병목시킨 각각의 기기를 구조체들간의 관계를 다르는 것??
: 각가의 구조처를 매핑하는 것의 대한 관계를 다루는 것을 분류이론이라고 한다.

functor
: 구조체는 구조체로 함수는 함수로 대응시키는 함수
: Map 함수 -> functor의 예시
-> 중첩 문제 해결가능?? 
    : 어떤 객체가 난수를 통해 가져오는 함수가 있다고 가정하자
      입력값과 결과값을 다시 매핑할 경우 중첩이 될 수 있다는 것이다.

-------------------------------------------------------------------------------

part3




























>>>>>>> f85345a97cf9b5b8ae6e3a10fd175d1b6d164da4

Part2
함수형 코틀린 프로그래밍

함수형 프로그래밍
-> 실제 개발에 의미가 있는지 생각해보아야 함

```
함수형 프로그래밍 접근
목적을 이해하고
어떻게 새용해야할 지 알아야 하며
그 이후에 무엇이 있는 지 파악해도 늦지 않다.
```

1. 간결한 코드 작성하기
2. 고차함수를 통해 기능 확장한다.
3. 객체지향 식으로 클린코드 작성하기 
4. 인터페이스 추상화 작업시 [데이터 타입 작성]
5. 이러한 함수를 하나의 추상화 작업을 할 수 있음.
6. 외부에서 접근할 extern을 통해 다형성을 표현
7. 안전성의 대한 이슈 -> 수정 변도성이 높다. 
서버 통신 클라이언트를 활용하여 배열을 가져와 데이터 로직을 작성한다.
데이터 전처리 작업 및 생성 하는 작업들은 [가독성, 클라이언트가 임의로 수정가능]
: 해결 방법
-> 객체 생성시 [parmeter] 없이 함수 로직을 빼서 격리 시킨다.
-> 함수 스코프를 통해 해결을 한다.
-> 해당 패키지 활용을 통해 추상화 및 인터페이스 확용을 적극적으로 활용한다.
    // 객체.외부 상태의 변동이 있는 부분은 블록 Scope을 격리한다.

Types of Function
1. Pure function : 입력이 동일하면 결과가 항상 같은 함수를 순수함수(Pure Function)라 한다.
sum += x + y 
2. Side Effect : 외부 상태에 영향을 줄 수 있고 이를 관찰하는 행위??
// 함수 그자체를 모듈화된 가능 사용 ??
결론 : 외부 세계를 변경을 시키고,최소화하고 구분(격리)시키자

고차함수
-> CSV로 Append 하는 기능이 추가된다면??
-> 객체를 String으로 전환하는 로직을 외부에서 주입시켜 공통 로직에 다형성을 제공한다.
   여러가지의 기능이 사용가능??

Q. 재사용성을 끌어올리고 안정적으로 프로그래밍 하려면,
A. 고차함수를 활용하는 객체(객체 컨테이너 의 특성을 알고, 이를 활용하면 된다.

함수형에 적절한 "컨테이너"
-> Monad - monoid[결합법칙, 항등원의 관계]
: 체이닝해도 문제가 없도록 처리할 수 있다.
-> 

Category Theory
: 분류이론
: 구조체와 구조체들간의 관계를 다룬다.
-> 각각의 기기를 특성에 따라 분류가 가능하다.
-> 병목시킨 각각의 기기를 구조체들간의 관계를 다르는 것??
: 각가의 구조처를 매핑하는 것의 대한 관계를 다루는 것을 분류이론이라고 한다.

functor
: 구조체는 구조체로 함수는 함수로 대응시키는 함수
: Map 함수 -> functor의 예시
-> 중첩 문제 해결가능?? 
    : 어떤 객체가 난수를 통해 가져오는 함수가 있다고 가정하자
      입력값과 결과값을 다시 매핑할 경우 중첩이 될 수 있다는 것이다.

-------------------------------------------------------------------------------

part3 -> Flow 및 Life Cycle

---------------------------------------------------------------------------------

part4
Kopring으로 효율적인 백엔드 구성하기

1. 가독성 향상
2. 유용한 Extension function
3. 간단한 비동기 처리

- Entity 설계
  - Getter & Setter
  - Named Parameter
  - Default Constructor 
   // 가독성 향상

- Business Logic
  - Driviing  -> 엔티티 데이터 이름 설계
 - Location -> 데이터 변수 및 함수 불러옴
                   -> Path 을 지정하고, 함수, 조건문 사용
  // forEach, map, fit 등등 유용성 확장

- 성능 개선
  - Coroutine[코틀린] -> 비동기

-----------------------------------------------------------------------------------

